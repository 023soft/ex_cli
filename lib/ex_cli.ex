defmodule ExCLI do
  @moduledoc """
  Module containing functions to interact with an application generated by `ExCLI.DSL`
  """

  @doc """
  Parse the arguments using the given module, which should be using `ExCLI.DSL`
  """
  @spec parse(atom, [String.t], Keyword.t) :: {:ok, atom, map} | {:error, atom, Keyword.t}
  def parse(module, args \\ System.argv, options \\ []) do
    app = module.__app__
    ExCLI.Parser.parse(app, args, options)
  end


  @doc """
  Parse and run the arguments using the given module, which should be using `ExCLI.DSL`
  """
  @spec process(atom, [String.t], Keyword.t) :: :ok | {:error, atom, Keyword.t}
  def process(module, args \\ System.argv, options \\ []) do
    case parse(module, args, options) do
      {:ok, command, context} ->
        module.__run__(command, context)
      {:error, _reason, _details} = err ->
        err
    end
  end
end
